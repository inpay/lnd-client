<?php
/**
 * ActiveChannel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * rpc.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ActiveChannel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ActiveChannel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ActiveChannel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'active' => 'bool',
        'remote_pubkey' => 'string',
        'channel_point' => 'string',
        'chan_id' => 'string',
        'capacity' => 'string',
        'local_balance' => 'string',
        'remote_balance' => 'string',
        'commit_fee' => 'string',
        'commit_weight' => 'string',
        'fee_per_kw' => 'string',
        'unsettled_balance' => 'string',
        'total_satoshis_sent' => 'string',
        'total_satoshis_received' => 'string',
        'num_updates' => 'string',
        'pending_htlcs' => '\Swagger\Client\Model\HTLC[]',
        'csv_delay' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'active' => 'boolean',
        'remote_pubkey' => null,
        'channel_point' => null,
        'chan_id' => 'uint64',
        'capacity' => 'int64',
        'local_balance' => 'int64',
        'remote_balance' => 'int64',
        'commit_fee' => 'int64',
        'commit_weight' => 'int64',
        'fee_per_kw' => 'int64',
        'unsettled_balance' => 'int64',
        'total_satoshis_sent' => 'int64',
        'total_satoshis_received' => 'int64',
        'num_updates' => 'uint64',
        'pending_htlcs' => null,
        'csv_delay' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active' => 'active',
        'remote_pubkey' => 'remote_pubkey',
        'channel_point' => 'channel_point',
        'chan_id' => 'chan_id',
        'capacity' => 'capacity',
        'local_balance' => 'local_balance',
        'remote_balance' => 'remote_balance',
        'commit_fee' => 'commit_fee',
        'commit_weight' => 'commit_weight',
        'fee_per_kw' => 'fee_per_kw',
        'unsettled_balance' => 'unsettled_balance',
        'total_satoshis_sent' => 'total_satoshis_sent',
        'total_satoshis_received' => 'total_satoshis_received',
        'num_updates' => 'num_updates',
        'pending_htlcs' => 'pending_htlcs',
        'csv_delay' => 'csv_delay'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active' => 'setActive',
        'remote_pubkey' => 'setRemotePubkey',
        'channel_point' => 'setChannelPoint',
        'chan_id' => 'setChanId',
        'capacity' => 'setCapacity',
        'local_balance' => 'setLocalBalance',
        'remote_balance' => 'setRemoteBalance',
        'commit_fee' => 'setCommitFee',
        'commit_weight' => 'setCommitWeight',
        'fee_per_kw' => 'setFeePerKw',
        'unsettled_balance' => 'setUnsettledBalance',
        'total_satoshis_sent' => 'setTotalSatoshisSent',
        'total_satoshis_received' => 'setTotalSatoshisReceived',
        'num_updates' => 'setNumUpdates',
        'pending_htlcs' => 'setPendingHtlcs',
        'csv_delay' => 'setCsvDelay'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active' => 'getActive',
        'remote_pubkey' => 'getRemotePubkey',
        'channel_point' => 'getChannelPoint',
        'chan_id' => 'getChanId',
        'capacity' => 'getCapacity',
        'local_balance' => 'getLocalBalance',
        'remote_balance' => 'getRemoteBalance',
        'commit_fee' => 'getCommitFee',
        'commit_weight' => 'getCommitWeight',
        'fee_per_kw' => 'getFeePerKw',
        'unsettled_balance' => 'getUnsettledBalance',
        'total_satoshis_sent' => 'getTotalSatoshisSent',
        'total_satoshis_received' => 'getTotalSatoshisReceived',
        'num_updates' => 'getNumUpdates',
        'pending_htlcs' => 'getPendingHtlcs',
        'csv_delay' => 'getCsvDelay'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['remote_pubkey'] = isset($data['remote_pubkey']) ? $data['remote_pubkey'] : null;
        $this->container['channel_point'] = isset($data['channel_point']) ? $data['channel_point'] : null;
        $this->container['chan_id'] = isset($data['chan_id']) ? $data['chan_id'] : null;
        $this->container['capacity'] = isset($data['capacity']) ? $data['capacity'] : null;
        $this->container['local_balance'] = isset($data['local_balance']) ? $data['local_balance'] : null;
        $this->container['remote_balance'] = isset($data['remote_balance']) ? $data['remote_balance'] : null;
        $this->container['commit_fee'] = isset($data['commit_fee']) ? $data['commit_fee'] : null;
        $this->container['commit_weight'] = isset($data['commit_weight']) ? $data['commit_weight'] : null;
        $this->container['fee_per_kw'] = isset($data['fee_per_kw']) ? $data['fee_per_kw'] : null;
        $this->container['unsettled_balance'] = isset($data['unsettled_balance']) ? $data['unsettled_balance'] : null;
        $this->container['total_satoshis_sent'] = isset($data['total_satoshis_sent']) ? $data['total_satoshis_sent'] : null;
        $this->container['total_satoshis_received'] = isset($data['total_satoshis_received']) ? $data['total_satoshis_received'] : null;
        $this->container['num_updates'] = isset($data['num_updates']) ? $data['num_updates'] : null;
        $this->container['pending_htlcs'] = isset($data['pending_htlcs']) ? $data['pending_htlcs'] : null;
        $this->container['csv_delay'] = isset($data['csv_delay']) ? $data['csv_delay'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets remote_pubkey
     *
     * @return string
     */
    public function getRemotePubkey()
    {
        return $this->container['remote_pubkey'];
    }

    /**
     * Sets remote_pubkey
     *
     * @param string $remote_pubkey remote_pubkey
     *
     * @return $this
     */
    public function setRemotePubkey($remote_pubkey)
    {
        $this->container['remote_pubkey'] = $remote_pubkey;

        return $this;
    }

    /**
     * Gets channel_point
     *
     * @return string
     */
    public function getChannelPoint()
    {
        return $this->container['channel_point'];
    }

    /**
     * Sets channel_point
     *
     * @param string $channel_point * The outpoint (txid:index) of the funding transaction. With this value, Bob will be able to generate a signature for Alice's version of the commitment transaction.
     *
     * @return $this
     */
    public function setChannelPoint($channel_point)
    {
        $this->container['channel_point'] = $channel_point;

        return $this;
    }

    /**
     * Gets chan_id
     *
     * @return string
     */
    public function getChanId()
    {
        return $this->container['chan_id'];
    }

    /**
     * Sets chan_id
     *
     * @param string $chan_id * The unique channel ID for the channel. The first 3 bytes are the block height, the next 3 the index within the block, and the last 2 bytes are the output index for the channel.
     *
     * @return $this
     */
    public function setChanId($chan_id)
    {
        $this->container['chan_id'] = $chan_id;

        return $this;
    }

    /**
     * Gets capacity
     *
     * @return string
     */
    public function getCapacity()
    {
        return $this->container['capacity'];
    }

    /**
     * Sets capacity
     *
     * @param string $capacity capacity
     *
     * @return $this
     */
    public function setCapacity($capacity)
    {
        $this->container['capacity'] = $capacity;

        return $this;
    }

    /**
     * Gets local_balance
     *
     * @return string
     */
    public function getLocalBalance()
    {
        return $this->container['local_balance'];
    }

    /**
     * Sets local_balance
     *
     * @param string $local_balance local_balance
     *
     * @return $this
     */
    public function setLocalBalance($local_balance)
    {
        $this->container['local_balance'] = $local_balance;

        return $this;
    }

    /**
     * Gets remote_balance
     *
     * @return string
     */
    public function getRemoteBalance()
    {
        return $this->container['remote_balance'];
    }

    /**
     * Sets remote_balance
     *
     * @param string $remote_balance remote_balance
     *
     * @return $this
     */
    public function setRemoteBalance($remote_balance)
    {
        $this->container['remote_balance'] = $remote_balance;

        return $this;
    }

    /**
     * Gets commit_fee
     *
     * @return string
     */
    public function getCommitFee()
    {
        return $this->container['commit_fee'];
    }

    /**
     * Sets commit_fee
     *
     * @param string $commit_fee * The amount calculated to be paid in fees for the current set of commitment transactions. The fee amount is persisted with the channel in order to allow the fee amount to be removed and recalculated with each channel state update, including updates that happen after a system restart.
     *
     * @return $this
     */
    public function setCommitFee($commit_fee)
    {
        $this->container['commit_fee'] = $commit_fee;

        return $this;
    }

    /**
     * Gets commit_weight
     *
     * @return string
     */
    public function getCommitWeight()
    {
        return $this->container['commit_weight'];
    }

    /**
     * Sets commit_weight
     *
     * @param string $commit_weight commit_weight
     *
     * @return $this
     */
    public function setCommitWeight($commit_weight)
    {
        $this->container['commit_weight'] = $commit_weight;

        return $this;
    }

    /**
     * Gets fee_per_kw
     *
     * @return string
     */
    public function getFeePerKw()
    {
        return $this->container['fee_per_kw'];
    }

    /**
     * Sets fee_per_kw
     *
     * @param string $fee_per_kw * The required number of satoshis per kilo-weight that the requester will pay at all times, for both the funding transaction and commitment transaction. This value can later be updated once the channel is open.
     *
     * @return $this
     */
    public function setFeePerKw($fee_per_kw)
    {
        $this->container['fee_per_kw'] = $fee_per_kw;

        return $this;
    }

    /**
     * Gets unsettled_balance
     *
     * @return string
     */
    public function getUnsettledBalance()
    {
        return $this->container['unsettled_balance'];
    }

    /**
     * Sets unsettled_balance
     *
     * @param string $unsettled_balance unsettled_balance
     *
     * @return $this
     */
    public function setUnsettledBalance($unsettled_balance)
    {
        $this->container['unsettled_balance'] = $unsettled_balance;

        return $this;
    }

    /**
     * Gets total_satoshis_sent
     *
     * @return string
     */
    public function getTotalSatoshisSent()
    {
        return $this->container['total_satoshis_sent'];
    }

    /**
     * Sets total_satoshis_sent
     *
     * @param string $total_satoshis_sent * The total number of satoshis we've sent within this channel.
     *
     * @return $this
     */
    public function setTotalSatoshisSent($total_satoshis_sent)
    {
        $this->container['total_satoshis_sent'] = $total_satoshis_sent;

        return $this;
    }

    /**
     * Gets total_satoshis_received
     *
     * @return string
     */
    public function getTotalSatoshisReceived()
    {
        return $this->container['total_satoshis_received'];
    }

    /**
     * Sets total_satoshis_received
     *
     * @param string $total_satoshis_received * The total number of satoshis we've received within this channel.
     *
     * @return $this
     */
    public function setTotalSatoshisReceived($total_satoshis_received)
    {
        $this->container['total_satoshis_received'] = $total_satoshis_received;

        return $this;
    }

    /**
     * Gets num_updates
     *
     * @return string
     */
    public function getNumUpdates()
    {
        return $this->container['num_updates'];
    }

    /**
     * Sets num_updates
     *
     * @param string $num_updates * The total number of updates conducted within this channel.
     *
     * @return $this
     */
    public function setNumUpdates($num_updates)
    {
        $this->container['num_updates'] = $num_updates;

        return $this;
    }

    /**
     * Gets pending_htlcs
     *
     * @return \Swagger\Client\Model\HTLC[]
     */
    public function getPendingHtlcs()
    {
        return $this->container['pending_htlcs'];
    }

    /**
     * Sets pending_htlcs
     *
     * @param \Swagger\Client\Model\HTLC[] $pending_htlcs * The list of active, uncleared HTLCs currently pending within the channel.
     *
     * @return $this
     */
    public function setPendingHtlcs($pending_htlcs)
    {
        $this->container['pending_htlcs'] = $pending_htlcs;

        return $this;
    }

    /**
     * Gets csv_delay
     *
     * @return int
     */
    public function getCsvDelay()
    {
        return $this->container['csv_delay'];
    }

    /**
     * Sets csv_delay
     *
     * @param int $csv_delay * The CSV delay expressed in relative blocks. If the channel is force closed, we'll need to wait for this many blocks before we can regain our funds.
     *
     * @return $this
     */
    public function setCsvDelay($csv_delay)
    {
        $this->container['csv_delay'] = $csv_delay;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


