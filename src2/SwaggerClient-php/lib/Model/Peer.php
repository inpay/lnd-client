<?php
/**
 * Peer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * rpc.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Peer Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Peer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Peer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'pub_key' => 'string',
        'peer_id' => 'int',
        'address' => 'string',
        'bytes_sent' => 'string',
        'bytes_recv' => 'string',
        'sat_sent' => 'string',
        'sat_recv' => 'string',
        'inbound' => 'bool',
        'ping_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'pub_key' => null,
        'peer_id' => 'int32',
        'address' => null,
        'bytes_sent' => 'uint64',
        'bytes_recv' => 'uint64',
        'sat_sent' => 'int64',
        'sat_recv' => 'int64',
        'inbound' => 'boolean',
        'ping_time' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pub_key' => 'pub_key',
        'peer_id' => 'peer_id',
        'address' => 'address',
        'bytes_sent' => 'bytes_sent',
        'bytes_recv' => 'bytes_recv',
        'sat_sent' => 'sat_sent',
        'sat_recv' => 'sat_recv',
        'inbound' => 'inbound',
        'ping_time' => 'ping_time'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pub_key' => 'setPubKey',
        'peer_id' => 'setPeerId',
        'address' => 'setAddress',
        'bytes_sent' => 'setBytesSent',
        'bytes_recv' => 'setBytesRecv',
        'sat_sent' => 'setSatSent',
        'sat_recv' => 'setSatRecv',
        'inbound' => 'setInbound',
        'ping_time' => 'setPingTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pub_key' => 'getPubKey',
        'peer_id' => 'getPeerId',
        'address' => 'getAddress',
        'bytes_sent' => 'getBytesSent',
        'bytes_recv' => 'getBytesRecv',
        'sat_sent' => 'getSatSent',
        'sat_recv' => 'getSatRecv',
        'inbound' => 'getInbound',
        'ping_time' => 'getPingTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['pub_key'] = isset($data['pub_key']) ? $data['pub_key'] : null;
        $this->container['peer_id'] = isset($data['peer_id']) ? $data['peer_id'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['bytes_sent'] = isset($data['bytes_sent']) ? $data['bytes_sent'] : null;
        $this->container['bytes_recv'] = isset($data['bytes_recv']) ? $data['bytes_recv'] : null;
        $this->container['sat_sent'] = isset($data['sat_sent']) ? $data['sat_sent'] : null;
        $this->container['sat_recv'] = isset($data['sat_recv']) ? $data['sat_recv'] : null;
        $this->container['inbound'] = isset($data['inbound']) ? $data['inbound'] : null;
        $this->container['ping_time'] = isset($data['ping_time']) ? $data['ping_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets pub_key
     *
     * @return string
     */
    public function getPubKey()
    {
        return $this->container['pub_key'];
    }

    /**
     * Sets pub_key
     *
     * @param string $pub_key pub_key
     *
     * @return $this
     */
    public function setPubKey($pub_key)
    {
        $this->container['pub_key'] = $pub_key;

        return $this;
    }

    /**
     * Gets peer_id
     *
     * @return int
     */
    public function getPeerId()
    {
        return $this->container['peer_id'];
    }

    /**
     * Sets peer_id
     *
     * @param int $peer_id peer_id
     *
     * @return $this
     */
    public function setPeerId($peer_id)
    {
        $this->container['peer_id'] = $peer_id;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets bytes_sent
     *
     * @return string
     */
    public function getBytesSent()
    {
        return $this->container['bytes_sent'];
    }

    /**
     * Sets bytes_sent
     *
     * @param string $bytes_sent bytes_sent
     *
     * @return $this
     */
    public function setBytesSent($bytes_sent)
    {
        $this->container['bytes_sent'] = $bytes_sent;

        return $this;
    }

    /**
     * Gets bytes_recv
     *
     * @return string
     */
    public function getBytesRecv()
    {
        return $this->container['bytes_recv'];
    }

    /**
     * Sets bytes_recv
     *
     * @param string $bytes_recv bytes_recv
     *
     * @return $this
     */
    public function setBytesRecv($bytes_recv)
    {
        $this->container['bytes_recv'] = $bytes_recv;

        return $this;
    }

    /**
     * Gets sat_sent
     *
     * @return string
     */
    public function getSatSent()
    {
        return $this->container['sat_sent'];
    }

    /**
     * Sets sat_sent
     *
     * @param string $sat_sent sat_sent
     *
     * @return $this
     */
    public function setSatSent($sat_sent)
    {
        $this->container['sat_sent'] = $sat_sent;

        return $this;
    }

    /**
     * Gets sat_recv
     *
     * @return string
     */
    public function getSatRecv()
    {
        return $this->container['sat_recv'];
    }

    /**
     * Sets sat_recv
     *
     * @param string $sat_recv sat_recv
     *
     * @return $this
     */
    public function setSatRecv($sat_recv)
    {
        $this->container['sat_recv'] = $sat_recv;

        return $this;
    }

    /**
     * Gets inbound
     *
     * @return bool
     */
    public function getInbound()
    {
        return $this->container['inbound'];
    }

    /**
     * Sets inbound
     *
     * @param bool $inbound inbound
     *
     * @return $this
     */
    public function setInbound($inbound)
    {
        $this->container['inbound'] = $inbound;

        return $this;
    }

    /**
     * Gets ping_time
     *
     * @return string
     */
    public function getPingTime()
    {
        return $this->container['ping_time'];
    }

    /**
     * Sets ping_time
     *
     * @param string $ping_time ping_time
     *
     * @return $this
     */
    public function setPingTime($ping_time)
    {
        $this->container['ping_time'] = $ping_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


