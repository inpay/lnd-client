<?php
/**
 * ChannelEdgeUpdate
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * rpc.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ChannelEdgeUpdate Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ChannelEdgeUpdate implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ChannelEdgeUpdate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'chan_id' => 'string',
        'chan_point' => '\Swagger\Client\Model\ChannelPoint',
        'capacity' => 'string',
        'routing_policy' => '\Swagger\Client\Model\RoutingPolicy',
        'advertising_node' => 'string',
        'connecting_node' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'chan_id' => 'uint64',
        'chan_point' => null,
        'capacity' => 'int64',
        'routing_policy' => null,
        'advertising_node' => null,
        'connecting_node' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'chan_id' => 'chan_id',
        'chan_point' => 'chan_point',
        'capacity' => 'capacity',
        'routing_policy' => 'routing_policy',
        'advertising_node' => 'advertising_node',
        'connecting_node' => 'connecting_node'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'chan_id' => 'setChanId',
        'chan_point' => 'setChanPoint',
        'capacity' => 'setCapacity',
        'routing_policy' => 'setRoutingPolicy',
        'advertising_node' => 'setAdvertisingNode',
        'connecting_node' => 'setConnectingNode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'chan_id' => 'getChanId',
        'chan_point' => 'getChanPoint',
        'capacity' => 'getCapacity',
        'routing_policy' => 'getRoutingPolicy',
        'advertising_node' => 'getAdvertisingNode',
        'connecting_node' => 'getConnectingNode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['chan_id'] = isset($data['chan_id']) ? $data['chan_id'] : null;
        $this->container['chan_point'] = isset($data['chan_point']) ? $data['chan_point'] : null;
        $this->container['capacity'] = isset($data['capacity']) ? $data['capacity'] : null;
        $this->container['routing_policy'] = isset($data['routing_policy']) ? $data['routing_policy'] : null;
        $this->container['advertising_node'] = isset($data['advertising_node']) ? $data['advertising_node'] : null;
        $this->container['connecting_node'] = isset($data['connecting_node']) ? $data['connecting_node'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets chan_id
     *
     * @return string
     */
    public function getChanId()
    {
        return $this->container['chan_id'];
    }

    /**
     * Sets chan_id
     *
     * @param string $chan_id * The unique channel ID for the channel. The first 3 bytes are the block height, the next 3 the index within the block, and the last 2 bytes are the output index for the channel.
     *
     * @return $this
     */
    public function setChanId($chan_id)
    {
        $this->container['chan_id'] = $chan_id;

        return $this;
    }

    /**
     * Gets chan_point
     *
     * @return \Swagger\Client\Model\ChannelPoint
     */
    public function getChanPoint()
    {
        return $this->container['chan_point'];
    }

    /**
     * Sets chan_point
     *
     * @param \Swagger\Client\Model\ChannelPoint $chan_point chan_point
     *
     * @return $this
     */
    public function setChanPoint($chan_point)
    {
        $this->container['chan_point'] = $chan_point;

        return $this;
    }

    /**
     * Gets capacity
     *
     * @return string
     */
    public function getCapacity()
    {
        return $this->container['capacity'];
    }

    /**
     * Sets capacity
     *
     * @param string $capacity capacity
     *
     * @return $this
     */
    public function setCapacity($capacity)
    {
        $this->container['capacity'] = $capacity;

        return $this;
    }

    /**
     * Gets routing_policy
     *
     * @return \Swagger\Client\Model\RoutingPolicy
     */
    public function getRoutingPolicy()
    {
        return $this->container['routing_policy'];
    }

    /**
     * Sets routing_policy
     *
     * @param \Swagger\Client\Model\RoutingPolicy $routing_policy routing_policy
     *
     * @return $this
     */
    public function setRoutingPolicy($routing_policy)
    {
        $this->container['routing_policy'] = $routing_policy;

        return $this;
    }

    /**
     * Gets advertising_node
     *
     * @return string
     */
    public function getAdvertisingNode()
    {
        return $this->container['advertising_node'];
    }

    /**
     * Sets advertising_node
     *
     * @param string $advertising_node advertising_node
     *
     * @return $this
     */
    public function setAdvertisingNode($advertising_node)
    {
        $this->container['advertising_node'] = $advertising_node;

        return $this;
    }

    /**
     * Gets connecting_node
     *
     * @return string
     */
    public function getConnectingNode()
    {
        return $this->container['connecting_node'];
    }

    /**
     * Sets connecting_node
     *
     * @param string $connecting_node connecting_node
     *
     * @return $this
     */
    public function setConnectingNode($connecting_node)
    {
        $this->container['connecting_node'] = $connecting_node;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


