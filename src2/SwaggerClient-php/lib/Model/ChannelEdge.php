<?php
/**
 * ChannelEdge
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * rpc.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ChannelEdge Class Doc Comment
 *
 * @category Class
 * @description * A fully authenticated channel along with all its unique attributes. Once an authenticated channel announcement has been processed on the network, then a instance of ChannelEdgeInfo encapsulating the channels attributes is stored. The other portions relevant to routing policy of a channel are stored within a ChannelEdgePolicy for each direction of the channel.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ChannelEdge implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ChannelEdge';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'channel_id' => 'string',
        'chan_point' => 'string',
        'last_update' => 'int',
        'node1_pub' => 'string',
        'node2_pub' => 'string',
        'capacity' => 'string',
        'node1_policy' => '\Swagger\Client\Model\RoutingPolicy',
        'node2_policy' => '\Swagger\Client\Model\RoutingPolicy'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'channel_id' => 'uint64',
        'chan_point' => null,
        'last_update' => 'int64',
        'node1_pub' => null,
        'node2_pub' => null,
        'capacity' => 'int64',
        'node1_policy' => null,
        'node2_policy' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'channel_id' => 'channel_id',
        'chan_point' => 'chan_point',
        'last_update' => 'last_update',
        'node1_pub' => 'node1_pub',
        'node2_pub' => 'node2_pub',
        'capacity' => 'capacity',
        'node1_policy' => 'node1_policy',
        'node2_policy' => 'node2_policy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'channel_id' => 'setChannelId',
        'chan_point' => 'setChanPoint',
        'last_update' => 'setLastUpdate',
        'node1_pub' => 'setNode1Pub',
        'node2_pub' => 'setNode2Pub',
        'capacity' => 'setCapacity',
        'node1_policy' => 'setNode1Policy',
        'node2_policy' => 'setNode2Policy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'channel_id' => 'getChannelId',
        'chan_point' => 'getChanPoint',
        'last_update' => 'getLastUpdate',
        'node1_pub' => 'getNode1Pub',
        'node2_pub' => 'getNode2Pub',
        'capacity' => 'getCapacity',
        'node1_policy' => 'getNode1Policy',
        'node2_policy' => 'getNode2Policy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['channel_id'] = isset($data['channel_id']) ? $data['channel_id'] : null;
        $this->container['chan_point'] = isset($data['chan_point']) ? $data['chan_point'] : null;
        $this->container['last_update'] = isset($data['last_update']) ? $data['last_update'] : null;
        $this->container['node1_pub'] = isset($data['node1_pub']) ? $data['node1_pub'] : null;
        $this->container['node2_pub'] = isset($data['node2_pub']) ? $data['node2_pub'] : null;
        $this->container['capacity'] = isset($data['capacity']) ? $data['capacity'] : null;
        $this->container['node1_policy'] = isset($data['node1_policy']) ? $data['node1_policy'] : null;
        $this->container['node2_policy'] = isset($data['node2_policy']) ? $data['node2_policy'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets channel_id
     *
     * @return string
     */
    public function getChannelId()
    {
        return $this->container['channel_id'];
    }

    /**
     * Sets channel_id
     *
     * @param string $channel_id * The unique channel ID for the channel. The first 3 bytes are the block height, the next 3 the index within the block, and the last 2 bytes are the output index for the channel.
     *
     * @return $this
     */
    public function setChannelId($channel_id)
    {
        $this->container['channel_id'] = $channel_id;

        return $this;
    }

    /**
     * Gets chan_point
     *
     * @return string
     */
    public function getChanPoint()
    {
        return $this->container['chan_point'];
    }

    /**
     * Sets chan_point
     *
     * @param string $chan_point chan_point
     *
     * @return $this
     */
    public function setChanPoint($chan_point)
    {
        $this->container['chan_point'] = $chan_point;

        return $this;
    }

    /**
     * Gets last_update
     *
     * @return int
     */
    public function getLastUpdate()
    {
        return $this->container['last_update'];
    }

    /**
     * Sets last_update
     *
     * @param int $last_update last_update
     *
     * @return $this
     */
    public function setLastUpdate($last_update)
    {
        $this->container['last_update'] = $last_update;

        return $this;
    }

    /**
     * Gets node1_pub
     *
     * @return string
     */
    public function getNode1Pub()
    {
        return $this->container['node1_pub'];
    }

    /**
     * Sets node1_pub
     *
     * @param string $node1_pub node1_pub
     *
     * @return $this
     */
    public function setNode1Pub($node1_pub)
    {
        $this->container['node1_pub'] = $node1_pub;

        return $this;
    }

    /**
     * Gets node2_pub
     *
     * @return string
     */
    public function getNode2Pub()
    {
        return $this->container['node2_pub'];
    }

    /**
     * Sets node2_pub
     *
     * @param string $node2_pub node2_pub
     *
     * @return $this
     */
    public function setNode2Pub($node2_pub)
    {
        $this->container['node2_pub'] = $node2_pub;

        return $this;
    }

    /**
     * Gets capacity
     *
     * @return string
     */
    public function getCapacity()
    {
        return $this->container['capacity'];
    }

    /**
     * Sets capacity
     *
     * @param string $capacity capacity
     *
     * @return $this
     */
    public function setCapacity($capacity)
    {
        $this->container['capacity'] = $capacity;

        return $this;
    }

    /**
     * Gets node1_policy
     *
     * @return \Swagger\Client\Model\RoutingPolicy
     */
    public function getNode1Policy()
    {
        return $this->container['node1_policy'];
    }

    /**
     * Sets node1_policy
     *
     * @param \Swagger\Client\Model\RoutingPolicy $node1_policy node1_policy
     *
     * @return $this
     */
    public function setNode1Policy($node1_policy)
    {
        $this->container['node1_policy'] = $node1_policy;

        return $this;
    }

    /**
     * Gets node2_policy
     *
     * @return \Swagger\Client\Model\RoutingPolicy
     */
    public function getNode2Policy()
    {
        return $this->container['node2_policy'];
    }

    /**
     * Sets node2_policy
     *
     * @param \Swagger\Client\Model\RoutingPolicy $node2_policy node2_policy
     *
     * @return $this
     */
    public function setNode2Policy($node2_policy)
    {
        $this->container['node2_policy'] = $node2_policy;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


