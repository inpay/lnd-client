<?php
/**
 * NetworkInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * rpc.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * NetworkInfo Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NetworkInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NetworkInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'graph_diameter' => 'int',
        'avg_out_degree' => 'double',
        'max_out_degree' => 'int',
        'num_nodes' => 'int',
        'num_channels' => 'int',
        'total_network_capacity' => 'string',
        'avg_channel_size' => 'double',
        'min_channel_size' => 'string',
        'max_channel_size' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'graph_diameter' => 'int64',
        'avg_out_degree' => 'double',
        'max_out_degree' => 'int64',
        'num_nodes' => 'int64',
        'num_channels' => 'int64',
        'total_network_capacity' => 'int64',
        'avg_channel_size' => 'double',
        'min_channel_size' => 'int64',
        'max_channel_size' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'graph_diameter' => 'graph_diameter',
        'avg_out_degree' => 'avg_out_degree',
        'max_out_degree' => 'max_out_degree',
        'num_nodes' => 'num_nodes',
        'num_channels' => 'num_channels',
        'total_network_capacity' => 'total_network_capacity',
        'avg_channel_size' => 'avg_channel_size',
        'min_channel_size' => 'min_channel_size',
        'max_channel_size' => 'max_channel_size'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'graph_diameter' => 'setGraphDiameter',
        'avg_out_degree' => 'setAvgOutDegree',
        'max_out_degree' => 'setMaxOutDegree',
        'num_nodes' => 'setNumNodes',
        'num_channels' => 'setNumChannels',
        'total_network_capacity' => 'setTotalNetworkCapacity',
        'avg_channel_size' => 'setAvgChannelSize',
        'min_channel_size' => 'setMinChannelSize',
        'max_channel_size' => 'setMaxChannelSize'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'graph_diameter' => 'getGraphDiameter',
        'avg_out_degree' => 'getAvgOutDegree',
        'max_out_degree' => 'getMaxOutDegree',
        'num_nodes' => 'getNumNodes',
        'num_channels' => 'getNumChannels',
        'total_network_capacity' => 'getTotalNetworkCapacity',
        'avg_channel_size' => 'getAvgChannelSize',
        'min_channel_size' => 'getMinChannelSize',
        'max_channel_size' => 'getMaxChannelSize'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['graph_diameter'] = isset($data['graph_diameter']) ? $data['graph_diameter'] : null;
        $this->container['avg_out_degree'] = isset($data['avg_out_degree']) ? $data['avg_out_degree'] : null;
        $this->container['max_out_degree'] = isset($data['max_out_degree']) ? $data['max_out_degree'] : null;
        $this->container['num_nodes'] = isset($data['num_nodes']) ? $data['num_nodes'] : null;
        $this->container['num_channels'] = isset($data['num_channels']) ? $data['num_channels'] : null;
        $this->container['total_network_capacity'] = isset($data['total_network_capacity']) ? $data['total_network_capacity'] : null;
        $this->container['avg_channel_size'] = isset($data['avg_channel_size']) ? $data['avg_channel_size'] : null;
        $this->container['min_channel_size'] = isset($data['min_channel_size']) ? $data['min_channel_size'] : null;
        $this->container['max_channel_size'] = isset($data['max_channel_size']) ? $data['max_channel_size'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets graph_diameter
     *
     * @return int
     */
    public function getGraphDiameter()
    {
        return $this->container['graph_diameter'];
    }

    /**
     * Sets graph_diameter
     *
     * @param int $graph_diameter graph_diameter
     *
     * @return $this
     */
    public function setGraphDiameter($graph_diameter)
    {
        $this->container['graph_diameter'] = $graph_diameter;

        return $this;
    }

    /**
     * Gets avg_out_degree
     *
     * @return double
     */
    public function getAvgOutDegree()
    {
        return $this->container['avg_out_degree'];
    }

    /**
     * Sets avg_out_degree
     *
     * @param double $avg_out_degree avg_out_degree
     *
     * @return $this
     */
    public function setAvgOutDegree($avg_out_degree)
    {
        $this->container['avg_out_degree'] = $avg_out_degree;

        return $this;
    }

    /**
     * Gets max_out_degree
     *
     * @return int
     */
    public function getMaxOutDegree()
    {
        return $this->container['max_out_degree'];
    }

    /**
     * Sets max_out_degree
     *
     * @param int $max_out_degree max_out_degree
     *
     * @return $this
     */
    public function setMaxOutDegree($max_out_degree)
    {
        $this->container['max_out_degree'] = $max_out_degree;

        return $this;
    }

    /**
     * Gets num_nodes
     *
     * @return int
     */
    public function getNumNodes()
    {
        return $this->container['num_nodes'];
    }

    /**
     * Sets num_nodes
     *
     * @param int $num_nodes num_nodes
     *
     * @return $this
     */
    public function setNumNodes($num_nodes)
    {
        $this->container['num_nodes'] = $num_nodes;

        return $this;
    }

    /**
     * Gets num_channels
     *
     * @return int
     */
    public function getNumChannels()
    {
        return $this->container['num_channels'];
    }

    /**
     * Sets num_channels
     *
     * @param int $num_channels num_channels
     *
     * @return $this
     */
    public function setNumChannels($num_channels)
    {
        $this->container['num_channels'] = $num_channels;

        return $this;
    }

    /**
     * Gets total_network_capacity
     *
     * @return string
     */
    public function getTotalNetworkCapacity()
    {
        return $this->container['total_network_capacity'];
    }

    /**
     * Sets total_network_capacity
     *
     * @param string $total_network_capacity total_network_capacity
     *
     * @return $this
     */
    public function setTotalNetworkCapacity($total_network_capacity)
    {
        $this->container['total_network_capacity'] = $total_network_capacity;

        return $this;
    }

    /**
     * Gets avg_channel_size
     *
     * @return double
     */
    public function getAvgChannelSize()
    {
        return $this->container['avg_channel_size'];
    }

    /**
     * Sets avg_channel_size
     *
     * @param double $avg_channel_size avg_channel_size
     *
     * @return $this
     */
    public function setAvgChannelSize($avg_channel_size)
    {
        $this->container['avg_channel_size'] = $avg_channel_size;

        return $this;
    }

    /**
     * Gets min_channel_size
     *
     * @return string
     */
    public function getMinChannelSize()
    {
        return $this->container['min_channel_size'];
    }

    /**
     * Sets min_channel_size
     *
     * @param string $min_channel_size min_channel_size
     *
     * @return $this
     */
    public function setMinChannelSize($min_channel_size)
    {
        $this->container['min_channel_size'] = $min_channel_size;

        return $this;
    }

    /**
     * Gets max_channel_size
     *
     * @return string
     */
    public function getMaxChannelSize()
    {
        return $this->container['max_channel_size'];
    }

    /**
     * Sets max_channel_size
     *
     * @param string $max_channel_size max_channel_size
     *
     * @return $this
     */
    public function setMaxChannelSize($max_channel_size)
    {
        $this->container['max_channel_size'] = $max_channel_size;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


