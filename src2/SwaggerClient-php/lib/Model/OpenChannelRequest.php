<?php
/**
 * OpenChannelRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * rpc.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OpenChannelRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OpenChannelRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OpenChannelRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'target_peer_id' => 'int',
        'node_pubkey' => 'string',
        'node_pubkey_string' => 'string',
        'local_funding_amount' => 'string',
        'push_sat' => 'string',
        'target_conf' => 'int',
        'sat_per_byte' => 'string',
        'private' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'target_peer_id' => 'int32',
        'node_pubkey' => 'byte',
        'node_pubkey_string' => null,
        'local_funding_amount' => 'int64',
        'push_sat' => 'int64',
        'target_conf' => 'int32',
        'sat_per_byte' => 'int64',
        'private' => 'boolean'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'target_peer_id' => 'target_peer_id',
        'node_pubkey' => 'node_pubkey',
        'node_pubkey_string' => 'node_pubkey_string',
        'local_funding_amount' => 'local_funding_amount',
        'push_sat' => 'push_sat',
        'target_conf' => 'target_conf',
        'sat_per_byte' => 'sat_per_byte',
        'private' => 'private'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'target_peer_id' => 'setTargetPeerId',
        'node_pubkey' => 'setNodePubkey',
        'node_pubkey_string' => 'setNodePubkeyString',
        'local_funding_amount' => 'setLocalFundingAmount',
        'push_sat' => 'setPushSat',
        'target_conf' => 'setTargetConf',
        'sat_per_byte' => 'setSatPerByte',
        'private' => 'setPrivate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'target_peer_id' => 'getTargetPeerId',
        'node_pubkey' => 'getNodePubkey',
        'node_pubkey_string' => 'getNodePubkeyString',
        'local_funding_amount' => 'getLocalFundingAmount',
        'push_sat' => 'getPushSat',
        'target_conf' => 'getTargetConf',
        'sat_per_byte' => 'getSatPerByte',
        'private' => 'getPrivate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['target_peer_id'] = isset($data['target_peer_id']) ? $data['target_peer_id'] : null;
        $this->container['node_pubkey'] = isset($data['node_pubkey']) ? $data['node_pubkey'] : null;
        $this->container['node_pubkey_string'] = isset($data['node_pubkey_string']) ? $data['node_pubkey_string'] : null;
        $this->container['local_funding_amount'] = isset($data['local_funding_amount']) ? $data['local_funding_amount'] : null;
        $this->container['push_sat'] = isset($data['push_sat']) ? $data['push_sat'] : null;
        $this->container['target_conf'] = isset($data['target_conf']) ? $data['target_conf'] : null;
        $this->container['sat_per_byte'] = isset($data['sat_per_byte']) ? $data['sat_per_byte'] : null;
        $this->container['private'] = isset($data['private']) ? $data['private'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['node_pubkey']) && !preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['node_pubkey'])) {
            $invalidProperties[] = "invalid value for 'node_pubkey', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['node_pubkey'])) {
            return false;
        }
        return true;
    }


    /**
     * Gets target_peer_id
     *
     * @return int
     */
    public function getTargetPeerId()
    {
        return $this->container['target_peer_id'];
    }

    /**
     * Sets target_peer_id
     *
     * @param int $target_peer_id target_peer_id
     *
     * @return $this
     */
    public function setTargetPeerId($target_peer_id)
    {
        $this->container['target_peer_id'] = $target_peer_id;

        return $this;
    }

    /**
     * Gets node_pubkey
     *
     * @return string
     */
    public function getNodePubkey()
    {
        return $this->container['node_pubkey'];
    }

    /**
     * Sets node_pubkey
     *
     * @param string $node_pubkey node_pubkey
     *
     * @return $this
     */
    public function setNodePubkey($node_pubkey)
    {

        if (!is_null($node_pubkey) && (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $node_pubkey))) {
            throw new \InvalidArgumentException("invalid value for $node_pubkey when calling OpenChannelRequest., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['node_pubkey'] = $node_pubkey;

        return $this;
    }

    /**
     * Gets node_pubkey_string
     *
     * @return string
     */
    public function getNodePubkeyString()
    {
        return $this->container['node_pubkey_string'];
    }

    /**
     * Sets node_pubkey_string
     *
     * @param string $node_pubkey_string node_pubkey_string
     *
     * @return $this
     */
    public function setNodePubkeyString($node_pubkey_string)
    {
        $this->container['node_pubkey_string'] = $node_pubkey_string;

        return $this;
    }

    /**
     * Gets local_funding_amount
     *
     * @return string
     */
    public function getLocalFundingAmount()
    {
        return $this->container['local_funding_amount'];
    }

    /**
     * Sets local_funding_amount
     *
     * @param string $local_funding_amount local_funding_amount
     *
     * @return $this
     */
    public function setLocalFundingAmount($local_funding_amount)
    {
        $this->container['local_funding_amount'] = $local_funding_amount;

        return $this;
    }

    /**
     * Gets push_sat
     *
     * @return string
     */
    public function getPushSat()
    {
        return $this->container['push_sat'];
    }

    /**
     * Sets push_sat
     *
     * @param string $push_sat push_sat
     *
     * @return $this
     */
    public function setPushSat($push_sat)
    {
        $this->container['push_sat'] = $push_sat;

        return $this;
    }

    /**
     * Gets target_conf
     *
     * @return int
     */
    public function getTargetConf()
    {
        return $this->container['target_conf'];
    }

    /**
     * Sets target_conf
     *
     * @param int $target_conf / The target number of blocks that the closure transaction should be confirmed by.
     *
     * @return $this
     */
    public function setTargetConf($target_conf)
    {
        $this->container['target_conf'] = $target_conf;

        return $this;
    }

    /**
     * Gets sat_per_byte
     *
     * @return string
     */
    public function getSatPerByte()
    {
        return $this->container['sat_per_byte'];
    }

    /**
     * Sets sat_per_byte
     *
     * @param string $sat_per_byte / A manual fee rate set in sat/byte that should be used when crafting the closure transaction.
     *
     * @return $this
     */
    public function setSatPerByte($sat_per_byte)
    {
        $this->container['sat_per_byte'] = $sat_per_byte;

        return $this;
    }

    /**
     * Gets private
     *
     * @return bool
     */
    public function getPrivate()
    {
        return $this->container['private'];
    }

    /**
     * Sets private
     *
     * @param bool $private / Whether this channel should be private, not announced to the greater network.
     *
     * @return $this
     */
    public function setPrivate($private)
    {
        $this->container['private'] = $private;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


