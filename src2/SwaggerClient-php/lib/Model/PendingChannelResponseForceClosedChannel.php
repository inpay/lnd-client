<?php
/**
 * PendingChannelResponseForceClosedChannel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * rpc.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PendingChannelResponseForceClosedChannel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PendingChannelResponseForceClosedChannel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PendingChannelResponseForceClosedChannel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'channel' => '\Swagger\Client\Model\PendingChannelResponsePendingChannel',
        'closing_txid' => 'string',
        'limbo_balance' => 'string',
        'maturity_height' => 'int',
        'blocks_til_maturity' => 'int',
        'recovered_balance' => 'string',
        'pending_htlcs' => '\Swagger\Client\Model\PendingHTLC[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'channel' => null,
        'closing_txid' => null,
        'limbo_balance' => 'int64',
        'maturity_height' => 'int64',
        'blocks_til_maturity' => 'int32',
        'recovered_balance' => 'int64',
        'pending_htlcs' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'channel' => 'channel',
        'closing_txid' => 'closing_txid',
        'limbo_balance' => 'limbo_balance',
        'maturity_height' => 'maturity_height',
        'blocks_til_maturity' => 'blocks_til_maturity',
        'recovered_balance' => 'recovered_balance',
        'pending_htlcs' => 'pending_htlcs'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'channel' => 'setChannel',
        'closing_txid' => 'setClosingTxid',
        'limbo_balance' => 'setLimboBalance',
        'maturity_height' => 'setMaturityHeight',
        'blocks_til_maturity' => 'setBlocksTilMaturity',
        'recovered_balance' => 'setRecoveredBalance',
        'pending_htlcs' => 'setPendingHtlcs'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'channel' => 'getChannel',
        'closing_txid' => 'getClosingTxid',
        'limbo_balance' => 'getLimboBalance',
        'maturity_height' => 'getMaturityHeight',
        'blocks_til_maturity' => 'getBlocksTilMaturity',
        'recovered_balance' => 'getRecoveredBalance',
        'pending_htlcs' => 'getPendingHtlcs'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['channel'] = isset($data['channel']) ? $data['channel'] : null;
        $this->container['closing_txid'] = isset($data['closing_txid']) ? $data['closing_txid'] : null;
        $this->container['limbo_balance'] = isset($data['limbo_balance']) ? $data['limbo_balance'] : null;
        $this->container['maturity_height'] = isset($data['maturity_height']) ? $data['maturity_height'] : null;
        $this->container['blocks_til_maturity'] = isset($data['blocks_til_maturity']) ? $data['blocks_til_maturity'] : null;
        $this->container['recovered_balance'] = isset($data['recovered_balance']) ? $data['recovered_balance'] : null;
        $this->container['pending_htlcs'] = isset($data['pending_htlcs']) ? $data['pending_htlcs'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets channel
     *
     * @return \Swagger\Client\Model\PendingChannelResponsePendingChannel
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param \Swagger\Client\Model\PendingChannelResponsePendingChannel $channel channel
     *
     * @return $this
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets closing_txid
     *
     * @return string
     */
    public function getClosingTxid()
    {
        return $this->container['closing_txid'];
    }

    /**
     * Sets closing_txid
     *
     * @param string $closing_txid closing_txid
     *
     * @return $this
     */
    public function setClosingTxid($closing_txid)
    {
        $this->container['closing_txid'] = $closing_txid;

        return $this;
    }

    /**
     * Gets limbo_balance
     *
     * @return string
     */
    public function getLimboBalance()
    {
        return $this->container['limbo_balance'];
    }

    /**
     * Sets limbo_balance
     *
     * @param string $limbo_balance limbo_balance
     *
     * @return $this
     */
    public function setLimboBalance($limbo_balance)
    {
        $this->container['limbo_balance'] = $limbo_balance;

        return $this;
    }

    /**
     * Gets maturity_height
     *
     * @return int
     */
    public function getMaturityHeight()
    {
        return $this->container['maturity_height'];
    }

    /**
     * Sets maturity_height
     *
     * @param int $maturity_height maturity_height
     *
     * @return $this
     */
    public function setMaturityHeight($maturity_height)
    {
        $this->container['maturity_height'] = $maturity_height;

        return $this;
    }

    /**
     * Gets blocks_til_maturity
     *
     * @return int
     */
    public function getBlocksTilMaturity()
    {
        return $this->container['blocks_til_maturity'];
    }

    /**
     * Sets blocks_til_maturity
     *
     * @param int $blocks_til_maturity Remaining # of blocks until the commitment output can be swept. Negative values indicate how many blocks have passed since becoming mature.
     *
     * @return $this
     */
    public function setBlocksTilMaturity($blocks_til_maturity)
    {
        $this->container['blocks_til_maturity'] = $blocks_til_maturity;

        return $this;
    }

    /**
     * Gets recovered_balance
     *
     * @return string
     */
    public function getRecoveredBalance()
    {
        return $this->container['recovered_balance'];
    }

    /**
     * Sets recovered_balance
     *
     * @param string $recovered_balance recovered_balance
     *
     * @return $this
     */
    public function setRecoveredBalance($recovered_balance)
    {
        $this->container['recovered_balance'] = $recovered_balance;

        return $this;
    }

    /**
     * Gets pending_htlcs
     *
     * @return \Swagger\Client\Model\PendingHTLC[]
     */
    public function getPendingHtlcs()
    {
        return $this->container['pending_htlcs'];
    }

    /**
     * Sets pending_htlcs
     *
     * @param \Swagger\Client\Model\PendingHTLC[] $pending_htlcs pending_htlcs
     *
     * @return $this
     */
    public function setPendingHtlcs($pending_htlcs)
    {
        $this->container['pending_htlcs'] = $pending_htlcs;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


