<?php
/**
 * PendingChannelResponsePendingOpenChannel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * rpc.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PendingChannelResponsePendingOpenChannel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PendingChannelResponsePendingOpenChannel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PendingChannelResponsePendingOpenChannel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'channel' => '\Swagger\Client\Model\PendingChannelResponsePendingChannel',
        'confirmation_height' => 'int',
        'blocks_till_open' => 'int',
        'commit_fee' => 'string',
        'commit_weight' => 'string',
        'fee_per_kw' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'channel' => null,
        'confirmation_height' => 'int64',
        'blocks_till_open' => 'int32',
        'commit_fee' => 'int64',
        'commit_weight' => 'int64',
        'fee_per_kw' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'channel' => 'channel',
        'confirmation_height' => 'confirmation_height',
        'blocks_till_open' => 'blocks_till_open',
        'commit_fee' => 'commit_fee',
        'commit_weight' => 'commit_weight',
        'fee_per_kw' => 'fee_per_kw'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'channel' => 'setChannel',
        'confirmation_height' => 'setConfirmationHeight',
        'blocks_till_open' => 'setBlocksTillOpen',
        'commit_fee' => 'setCommitFee',
        'commit_weight' => 'setCommitWeight',
        'fee_per_kw' => 'setFeePerKw'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'channel' => 'getChannel',
        'confirmation_height' => 'getConfirmationHeight',
        'blocks_till_open' => 'getBlocksTillOpen',
        'commit_fee' => 'getCommitFee',
        'commit_weight' => 'getCommitWeight',
        'fee_per_kw' => 'getFeePerKw'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['channel'] = isset($data['channel']) ? $data['channel'] : null;
        $this->container['confirmation_height'] = isset($data['confirmation_height']) ? $data['confirmation_height'] : null;
        $this->container['blocks_till_open'] = isset($data['blocks_till_open']) ? $data['blocks_till_open'] : null;
        $this->container['commit_fee'] = isset($data['commit_fee']) ? $data['commit_fee'] : null;
        $this->container['commit_weight'] = isset($data['commit_weight']) ? $data['commit_weight'] : null;
        $this->container['fee_per_kw'] = isset($data['fee_per_kw']) ? $data['fee_per_kw'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets channel
     *
     * @return \Swagger\Client\Model\PendingChannelResponsePendingChannel
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param \Swagger\Client\Model\PendingChannelResponsePendingChannel $channel channel
     *
     * @return $this
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets confirmation_height
     *
     * @return int
     */
    public function getConfirmationHeight()
    {
        return $this->container['confirmation_height'];
    }

    /**
     * Sets confirmation_height
     *
     * @param int $confirmation_height confirmation_height
     *
     * @return $this
     */
    public function setConfirmationHeight($confirmation_height)
    {
        $this->container['confirmation_height'] = $confirmation_height;

        return $this;
    }

    /**
     * Gets blocks_till_open
     *
     * @return int
     */
    public function getBlocksTillOpen()
    {
        return $this->container['blocks_till_open'];
    }

    /**
     * Sets blocks_till_open
     *
     * @param int $blocks_till_open blocks_till_open
     *
     * @return $this
     */
    public function setBlocksTillOpen($blocks_till_open)
    {
        $this->container['blocks_till_open'] = $blocks_till_open;

        return $this;
    }

    /**
     * Gets commit_fee
     *
     * @return string
     */
    public function getCommitFee()
    {
        return $this->container['commit_fee'];
    }

    /**
     * Sets commit_fee
     *
     * @param string $commit_fee * The amount calculated to be paid in fees for the current set of commitment transactions. The fee amount is persisted with the channel in order to allow the fee amount to be removed and recalculated with each channel state update, including updates that happen after a system restart.
     *
     * @return $this
     */
    public function setCommitFee($commit_fee)
    {
        $this->container['commit_fee'] = $commit_fee;

        return $this;
    }

    /**
     * Gets commit_weight
     *
     * @return string
     */
    public function getCommitWeight()
    {
        return $this->container['commit_weight'];
    }

    /**
     * Sets commit_weight
     *
     * @param string $commit_weight commit_weight
     *
     * @return $this
     */
    public function setCommitWeight($commit_weight)
    {
        $this->container['commit_weight'] = $commit_weight;

        return $this;
    }

    /**
     * Gets fee_per_kw
     *
     * @return string
     */
    public function getFeePerKw()
    {
        return $this->container['fee_per_kw'];
    }

    /**
     * Sets fee_per_kw
     *
     * @param string $fee_per_kw * The required number of satoshis per kilo-weight that the requester will pay at all times, for both the funding transaction and commitment transaction. This value can later be updated once the channel is open.
     *
     * @return $this
     */
    public function setFeePerKw($fee_per_kw)
    {
        $this->container['fee_per_kw'] = $fee_per_kw;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


