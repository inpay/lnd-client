<?php
/**
 * GetInfoResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * rpc.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * GetInfoResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetInfoResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetInfoResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'identity_pubkey' => 'string',
        'alias' => 'string',
        'num_pending_channels' => 'int',
        'num_active_channels' => 'int',
        'num_peers' => 'int',
        'block_height' => 'int',
        'block_hash' => 'string',
        'synced_to_chain' => 'bool',
        'testnet' => 'bool',
        'chains' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'identity_pubkey' => null,
        'alias' => null,
        'num_pending_channels' => 'int64',
        'num_active_channels' => 'int64',
        'num_peers' => 'int64',
        'block_height' => 'int64',
        'block_hash' => null,
        'synced_to_chain' => 'boolean',
        'testnet' => 'boolean',
        'chains' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'identity_pubkey' => 'identity_pubkey',
        'alias' => 'alias',
        'num_pending_channels' => 'num_pending_channels',
        'num_active_channels' => 'num_active_channels',
        'num_peers' => 'num_peers',
        'block_height' => 'block_height',
        'block_hash' => 'block_hash',
        'synced_to_chain' => 'synced_to_chain',
        'testnet' => 'testnet',
        'chains' => 'chains'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'identity_pubkey' => 'setIdentityPubkey',
        'alias' => 'setAlias',
        'num_pending_channels' => 'setNumPendingChannels',
        'num_active_channels' => 'setNumActiveChannels',
        'num_peers' => 'setNumPeers',
        'block_height' => 'setBlockHeight',
        'block_hash' => 'setBlockHash',
        'synced_to_chain' => 'setSyncedToChain',
        'testnet' => 'setTestnet',
        'chains' => 'setChains'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'identity_pubkey' => 'getIdentityPubkey',
        'alias' => 'getAlias',
        'num_pending_channels' => 'getNumPendingChannels',
        'num_active_channels' => 'getNumActiveChannels',
        'num_peers' => 'getNumPeers',
        'block_height' => 'getBlockHeight',
        'block_hash' => 'getBlockHash',
        'synced_to_chain' => 'getSyncedToChain',
        'testnet' => 'getTestnet',
        'chains' => 'getChains'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['identity_pubkey'] = isset($data['identity_pubkey']) ? $data['identity_pubkey'] : null;
        $this->container['alias'] = isset($data['alias']) ? $data['alias'] : null;
        $this->container['num_pending_channels'] = isset($data['num_pending_channels']) ? $data['num_pending_channels'] : null;
        $this->container['num_active_channels'] = isset($data['num_active_channels']) ? $data['num_active_channels'] : null;
        $this->container['num_peers'] = isset($data['num_peers']) ? $data['num_peers'] : null;
        $this->container['block_height'] = isset($data['block_height']) ? $data['block_height'] : null;
        $this->container['block_hash'] = isset($data['block_hash']) ? $data['block_hash'] : null;
        $this->container['synced_to_chain'] = isset($data['synced_to_chain']) ? $data['synced_to_chain'] : null;
        $this->container['testnet'] = isset($data['testnet']) ? $data['testnet'] : null;
        $this->container['chains'] = isset($data['chains']) ? $data['chains'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets identity_pubkey
     *
     * @return string
     */
    public function getIdentityPubkey()
    {
        return $this->container['identity_pubkey'];
    }

    /**
     * Sets identity_pubkey
     *
     * @param string $identity_pubkey / The identity pubkey of the current node.
     *
     * @return $this
     */
    public function setIdentityPubkey($identity_pubkey)
    {
        $this->container['identity_pubkey'] = $identity_pubkey;

        return $this;
    }

    /**
     * Gets alias
     *
     * @return string
     */
    public function getAlias()
    {
        return $this->container['alias'];
    }

    /**
     * Sets alias
     *
     * @param string $alias alias
     *
     * @return $this
     */
    public function setAlias($alias)
    {
        $this->container['alias'] = $alias;

        return $this;
    }

    /**
     * Gets num_pending_channels
     *
     * @return int
     */
    public function getNumPendingChannels()
    {
        return $this->container['num_pending_channels'];
    }

    /**
     * Sets num_pending_channels
     *
     * @param int $num_pending_channels num_pending_channels
     *
     * @return $this
     */
    public function setNumPendingChannels($num_pending_channels)
    {
        $this->container['num_pending_channels'] = $num_pending_channels;

        return $this;
    }

    /**
     * Gets num_active_channels
     *
     * @return int
     */
    public function getNumActiveChannels()
    {
        return $this->container['num_active_channels'];
    }

    /**
     * Sets num_active_channels
     *
     * @param int $num_active_channels num_active_channels
     *
     * @return $this
     */
    public function setNumActiveChannels($num_active_channels)
    {
        $this->container['num_active_channels'] = $num_active_channels;

        return $this;
    }

    /**
     * Gets num_peers
     *
     * @return int
     */
    public function getNumPeers()
    {
        return $this->container['num_peers'];
    }

    /**
     * Sets num_peers
     *
     * @param int $num_peers num_peers
     *
     * @return $this
     */
    public function setNumPeers($num_peers)
    {
        $this->container['num_peers'] = $num_peers;

        return $this;
    }

    /**
     * Gets block_height
     *
     * @return int
     */
    public function getBlockHeight()
    {
        return $this->container['block_height'];
    }

    /**
     * Sets block_height
     *
     * @param int $block_height block_height
     *
     * @return $this
     */
    public function setBlockHeight($block_height)
    {
        $this->container['block_height'] = $block_height;

        return $this;
    }

    /**
     * Gets block_hash
     *
     * @return string
     */
    public function getBlockHash()
    {
        return $this->container['block_hash'];
    }

    /**
     * Sets block_hash
     *
     * @param string $block_hash block_hash
     *
     * @return $this
     */
    public function setBlockHash($block_hash)
    {
        $this->container['block_hash'] = $block_hash;

        return $this;
    }

    /**
     * Gets synced_to_chain
     *
     * @return bool
     */
    public function getSyncedToChain()
    {
        return $this->container['synced_to_chain'];
    }

    /**
     * Sets synced_to_chain
     *
     * @param bool $synced_to_chain synced_to_chain
     *
     * @return $this
     */
    public function setSyncedToChain($synced_to_chain)
    {
        $this->container['synced_to_chain'] = $synced_to_chain;

        return $this;
    }

    /**
     * Gets testnet
     *
     * @return bool
     */
    public function getTestnet()
    {
        return $this->container['testnet'];
    }

    /**
     * Sets testnet
     *
     * @param bool $testnet testnet
     *
     * @return $this
     */
    public function setTestnet($testnet)
    {
        $this->container['testnet'] = $testnet;

        return $this;
    }

    /**
     * Gets chains
     *
     * @return string[]
     */
    public function getChains()
    {
        return $this->container['chains'];
    }

    /**
     * Sets chains
     *
     * @param string[] $chains chains
     *
     * @return $this
     */
    public function setChains($chains)
    {
        $this->container['chains'] = $chains;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


