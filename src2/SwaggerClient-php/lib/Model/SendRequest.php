<?php
/**
 * SendRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * rpc.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SendRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SendRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SendRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'dest' => 'string',
        'dest_string' => 'string',
        'amt' => 'string',
        'payment_hash' => 'string',
        'payment_hash_string' => 'string',
        'payment_request' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'dest' => 'byte',
        'dest_string' => null,
        'amt' => 'int64',
        'payment_hash' => 'byte',
        'payment_hash_string' => null,
        'payment_request' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dest' => 'dest',
        'dest_string' => 'dest_string',
        'amt' => 'amt',
        'payment_hash' => 'payment_hash',
        'payment_hash_string' => 'payment_hash_string',
        'payment_request' => 'payment_request'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dest' => 'setDest',
        'dest_string' => 'setDestString',
        'amt' => 'setAmt',
        'payment_hash' => 'setPaymentHash',
        'payment_hash_string' => 'setPaymentHashString',
        'payment_request' => 'setPaymentRequest'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dest' => 'getDest',
        'dest_string' => 'getDestString',
        'amt' => 'getAmt',
        'payment_hash' => 'getPaymentHash',
        'payment_hash_string' => 'getPaymentHashString',
        'payment_request' => 'getPaymentRequest'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['dest'] = isset($data['dest']) ? $data['dest'] : null;
        $this->container['dest_string'] = isset($data['dest_string']) ? $data['dest_string'] : null;
        $this->container['amt'] = isset($data['amt']) ? $data['amt'] : null;
        $this->container['payment_hash'] = isset($data['payment_hash']) ? $data['payment_hash'] : null;
        $this->container['payment_hash_string'] = isset($data['payment_hash_string']) ? $data['payment_hash_string'] : null;
        $this->container['payment_request'] = isset($data['payment_request']) ? $data['payment_request'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['dest']) && !preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['dest'])) {
            $invalidProperties[] = "invalid value for 'dest', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        if (!is_null($this->container['payment_hash']) && !preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['payment_hash'])) {
            $invalidProperties[] = "invalid value for 'payment_hash', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['dest'])) {
            return false;
        }
        if (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['payment_hash'])) {
            return false;
        }
        return true;
    }


    /**
     * Gets dest
     *
     * @return string
     */
    public function getDest()
    {
        return $this->container['dest'];
    }

    /**
     * Sets dest
     *
     * @param string $dest dest
     *
     * @return $this
     */
    public function setDest($dest)
    {

        if (!is_null($dest) && (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $dest))) {
            throw new \InvalidArgumentException("invalid value for $dest when calling SendRequest., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['dest'] = $dest;

        return $this;
    }

    /**
     * Gets dest_string
     *
     * @return string
     */
    public function getDestString()
    {
        return $this->container['dest_string'];
    }

    /**
     * Sets dest_string
     *
     * @param string $dest_string dest_string
     *
     * @return $this
     */
    public function setDestString($dest_string)
    {
        $this->container['dest_string'] = $dest_string;

        return $this;
    }

    /**
     * Gets amt
     *
     * @return string
     */
    public function getAmt()
    {
        return $this->container['amt'];
    }

    /**
     * Sets amt
     *
     * @param string $amt / Number of satoshis to send.
     *
     * @return $this
     */
    public function setAmt($amt)
    {
        $this->container['amt'] = $amt;

        return $this;
    }

    /**
     * Gets payment_hash
     *
     * @return string
     */
    public function getPaymentHash()
    {
        return $this->container['payment_hash'];
    }

    /**
     * Sets payment_hash
     *
     * @param string $payment_hash payment_hash
     *
     * @return $this
     */
    public function setPaymentHash($payment_hash)
    {

        if (!is_null($payment_hash) && (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $payment_hash))) {
            throw new \InvalidArgumentException("invalid value for $payment_hash when calling SendRequest., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['payment_hash'] = $payment_hash;

        return $this;
    }

    /**
     * Gets payment_hash_string
     *
     * @return string
     */
    public function getPaymentHashString()
    {
        return $this->container['payment_hash_string'];
    }

    /**
     * Sets payment_hash_string
     *
     * @param string $payment_hash_string payment_hash_string
     *
     * @return $this
     */
    public function setPaymentHashString($payment_hash_string)
    {
        $this->container['payment_hash_string'] = $payment_hash_string;

        return $this;
    }

    /**
     * Gets payment_request
     *
     * @return string
     */
    public function getPaymentRequest()
    {
        return $this->container['payment_request'];
    }

    /**
     * Sets payment_request
     *
     * @param string $payment_request * A bare-bones invoice for a payment within the Lightning Network.  With the details of the invoice, the sender has all the data necessary to send a payment to the recipient.
     *
     * @return $this
     */
    public function setPaymentRequest($payment_request)
    {
        $this->container['payment_request'] = $payment_request;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


